# Toggle debugging in horizon. True will cause useful tracebacks to appear in the browser.
# Not production friendly to say True here!
horizon_debug: True

# haproxy_vip must be an IP address not already in use. It must be in the same
# L2 network as the public interfaces.
haproxy_vip:      192.168.142.99
public_network_gateway: '{{hostvars.controller1.ansible_default_ipv4.gateway}}'
public_network_cidr:   192.168.142.0/24

# The floatingip_range addresses must be in the same L2 network as the public
# interfaces.
floatingip_range_start: 192.168.142.200
floatingip_range_end: 192.168.142.230

# Set to true if you wish to install multipath-tools and use MPIO on 
# the cinder device.
enable_mpio: false


# the block device to use underneath cinder-volume.
# /dev/mapper/mpath0 will use a multipathed device.
# Set this to /dev/sdb or some such if not using
# MPIO.
cinder_device: /dev/sdb
cinder_partition: /dev/sdb1

# Configure HTTP and HTTPS proxies here if needed.
proxy_env:
  # foo: bar is fake placeholder to make this a valid dictionary in case
  # we don't need/want to populate http_proxy. 
  foo: bar

  # comment these lines out if you don't need/want a proxy.
  http_proxy: http://192.168.142.254:3128
  https_proxy: http://192.168.142.254:3128


###  Do not edit below unless you're pretty sure. ###

os_username: admin
os_password: secrete
os_tenant_name: demo
os_auth_url: http://{{keystone_host}}:5000/v2.0

service_tenant: service

hypervisor: kvm

nova_db: nova
nova_db_user: nova
nova_db_pw: nova
nova_user: nova
nova_password: nova

neutron_db: neutron
neutron_db_user: neutron
neutron_db_pw: neutron
neutron_user: neutron
neutron_password: neutron

cinder_db: cinder
cinder_db_user: cinder
cinder_db_pw: cinder
cinder_user: cinder
cinder_password: cinder
cinder_volume_group: cinder-volumes


db_root_user: root
db_root_pw: root

glance_db: glance
glance_db_user: glance
glance_db_pw: glance
glance_user: glance
glance_password: glance

keystone_db: keystone
keystone_db_user: keystone
keystone_db_pw: keystone
# generate the admin token with something like:
# openssl rand -hex 16
keystone_admin_token: 5aa7f0aad3c51b62c330c7f955ffcb5b

rabbit_user: guest
rabbit_password: guest
rabbit_vhost: /
logging_queue: openstack_logs

# All the below services live on the controller.
db_host: "{{haproxy_vip}}"
db_port: 33306
db_lb_port: 3306
datadir: /var/lib/mysql/data
galera_cache_size: 512M
innodb_buffer_pool_size: 512M
clustername: galera
glance_host: "{{haproxy_vip}}"
keystone_host: "{{haproxy_vip}}"
api_host: "{{haproxy_vip}}"
rabbit_host: "{{haproxy_vip}}"
logstash_host: "{{hostvars.controller1.ansible_eth2.ipv4.address}}"
neutron_host: "{{haproxy_vip}}"

# generate the admin token with something like:
# openssl rand -hex 16
keystone_admin_token: 5aa7f0aad3c51b62c330c7f955ffcb5b

# variables for initial_data.sh (roles/keystone/templates/initial_data.sh.j2)
keystone_data:
  CONTROLLER_PUBLIC_ADDRESS: '{{keystone_host}}'
  CONTROLLER_INTERNAL_ADDRESS: '{{keystone_host}}'
  CONTROLLER_ADMIN_ADDRESS: '{{keystone_host}}'

